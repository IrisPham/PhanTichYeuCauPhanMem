<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        2Q==
</value>
  </data>
</root>